{"version":3,"sources":["const/apiURL.ts","const/queryNames.ts","hooks/useFetchImgurData.ts","context/ThemeContext.tsx","components/styledComponents/MaterialUISwitch.tsx","components/styledComponents/Search.tsx","components/styledComponents/StyledInputBase.tsx","pages/ImgurMemeList/components/Header.tsx","pages/ImgurMemeList/components/MemeListItem.tsx","pages/ImgurMemeList/MemeListPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiURL","queryNames","fetchImgurData","fetch","referrer","then","resp","json","data","THEME","ThemeToggleContext","createContext","themePaletteMode","setThemePaletteMode","mode","ThemeContextProvider","children","prefersDarkMode","useMediaQuery","useState","useEffect","theme","useMemo","createTheme","palette","Provider","value","ThemeProvider","MaterialUISwitch","styled","Switch","width","height","padding","margin","transform","color","backgroundImage","encodeURIComponent","opacity","backgroundColor","content","position","left","top","backgroundRepeat","backgroundPosition","borderRadius","Search","shape","alpha","common","white","marginLeft","breakpoints","up","spacing","SearchIconWrapper","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","Header","memo","onSearchStringChange","useContext","AppBar","Toolbar","sx","Hidden","smDown","Typography","variant","onChange","e","target","placeholder","inputProps","FormControlLabel","label","mr","ml","control","checked","onClick","ModalImg","link","onClose","Modal","open","flexDirection","IconButton","Close","flex","style","cursor","objectFit","src","alt","Media","image","linkForModal","setLinkForModal","type","includes","description","toString","Boolean","controls","loop","MemeListItem","index","item","finalItem","images","mb","t","Paper","overflow","mt","mx","p","my","title","Divider","overflowX","whiteSpace","tags","map","tag","Chip","display_name","MemeListPage","useQuery","refetchOnWindowFocus","searchString","setSearchString","setSearchStringDebounced","debounce","filteredMemeList","filter","meme","some","widthUnder500","Box","maxWidth","itemCount","length","itemSize","overscanCount","queryClient","QueryClient","App","CssBaseline","client","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.118c7e00.chunk.js","sourcesContent":["export const apiURL = {\n  baseURL: \"https://api.imgur.com\",\n  getMemes: \"/3/gallery/hot/viral/0.json\",\n};\n","export const queryNames = {\n  imgurFeed: \"imgur-feed\",\n};\n","import { ImgurData } from \"./types\";\nimport { useQuery } from \"react-query\";\nimport { apiURL, queryNames } from \"const\";\n\nconst fetchImgurData = () => {\n  return fetch(`${apiURL.baseURL}${apiURL.getMemes}`, {\n    referrer: \"\", // to make imgur api work - it is blocking localhost\n  })\n    .then((resp) => resp.json())\n    .then((data) => data?.data || []);\n};\n\nexport const useFetchImgurData = () => {\n  return useQuery<ImgurData[\"data\"]>(queryNames.imgurFeed, fetchImgurData, {\n    refetchOnWindowFocus: false,\n  });\n};\n","import { createTheme, PaletteMode, useMediaQuery } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/system\";\nimport {\n  createContext,\n  PropsWithChildren,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport const THEME: { [key: string]: PaletteMode } = {\n  DARK: \"dark\",\n  LIGHT: \"light\",\n};\n\nconst ThemeToggleContext = createContext({\n  themePaletteMode: \"\",\n  setThemePaletteMode: (mode: SetStateAction<\"dark\" | \"light\">) => {},\n});\n\nexport const useThemeToggleContext = () => useContext(ThemeToggleContext);\n\nexport const ThemeContextProvider = ({ children }: PropsWithChildren<{}>) => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const [themePaletteMode, setThemePaletteMode] = useState(\n    prefersDarkMode ? THEME.DARK : THEME.LIGHT\n  );\n\n  useEffect(() => {\n    setThemePaletteMode(prefersDarkMode ? THEME.DARK : THEME.LIGHT);\n  }, [prefersDarkMode]);\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themePaletteMode,\n        },\n      }),\n    [themePaletteMode]\n  );\n\n  return (\n    <ThemeToggleContext.Provider\n      value={{ themePaletteMode, setThemePaletteMode }}\n    >\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ThemeToggleContext.Provider>\n  );\n};\n","import { Switch } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nexport const MaterialUISwitch = styled(Switch)(({ theme }) => ({\n  width: 62,\n  height: 34,\n  padding: 7,\n  \"& .MuiSwitch-switchBase\": {\n    margin: 1,\n    padding: 0,\n    transform: \"translateX(6px)\",\n    \"&.Mui-checked\": {\n      color: \"#fff\",\n      transform: \"translateX(22px)\",\n      \"& .MuiSwitch-thumb:before\": {\n        backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n          \"#fff\"\n        )}\" d=\"M4.2 2.5l-.7 1.8-1.8.7 1.8.7.7 1.8.6-1.8L6.7 5l-1.9-.7-.6-1.8zm15 8.3a6.7 6.7 0 11-6.6-6.6 5.8 5.8 0 006.6 6.6z\"/></svg>')`,\n      },\n      \"& + .MuiSwitch-track\": {\n        opacity: 1,\n        backgroundColor: theme.palette.mode === \"dark\" ? \"#8796A5\" : \"#aab4be\",\n      },\n    },\n  },\n  \"& .MuiSwitch-thumb\": {\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#003892\" : \"#001e3c\",\n    width: 32,\n    height: 32,\n    \"&:before\": {\n      content: \"''\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\",\n      left: 0,\n      top: 0,\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: \"center\",\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n        \"#fff\"\n      )}\" d=\"M9.305 1.667V3.75h1.389V1.667h-1.39zm-4.707 1.95l-.982.982L5.09 6.072l.982-.982-1.473-1.473zm10.802 0L13.927 5.09l.982.982 1.473-1.473-.982-.982zM10 5.139a4.872 4.872 0 00-4.862 4.86A4.872 4.872 0 0010 14.862 4.872 4.872 0 0014.86 10 4.872 4.872 0 0010 5.139zm0 1.389A3.462 3.462 0 0113.471 10a3.462 3.462 0 01-3.473 3.472A3.462 3.462 0 016.527 10 3.462 3.462 0 0110 6.528zM1.665 9.305v1.39h2.083v-1.39H1.666zm14.583 0v1.39h2.084v-1.39h-2.084zM5.09 13.928L3.616 15.4l.982.982 1.473-1.473-.982-.982zm9.82 0l-.982.982 1.473 1.473.982-.982-1.473-1.473zM9.305 16.25v2.083h1.389V16.25h-1.39z\"/></svg>')`,\n    },\n  },\n  \"& .MuiSwitch-track\": {\n    opacity: 1,\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#8796A5\" : \"#aab4be\",\n    borderRadius: 20 / 2,\n  },\n}));\n","import { styled, alpha } from \"@mui/material/styles\";\n\nexport const Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  \"&:hover\": {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginLeft: 0,\n  width: \"100%\",\n  [theme.breakpoints.up(\"sm\")]: {\n    marginLeft: theme.spacing(1),\n    width: \"auto\",\n  },\n}));\n\nexport const SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: \"100%\",\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n}));\n","import { InputBase } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: \"inherit\",\n  \"& .MuiInputBase-input\": {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"12ch\",\n      \"&:focus\": {\n        width: \"20ch\",\n      },\n    },\n  },\n}));\n","import {\n  AppBar,\n  Toolbar,\n  FormControlLabel,\n  Typography,\n  Hidden,\n} from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport { THEME, useThemeToggleContext } from \"context\";\nimport { memo } from \"react\";\nimport {\n  MaterialUISwitch,\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"components\";\n\ninterface HeaderProps {\n  onSearchStringChange: (searchString: string) => void;\n}\n\nexport const Header = memo(({ onSearchStringChange }: HeaderProps) => {\n  const { themePaletteMode, setThemePaletteMode } = useThemeToggleContext();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar\n        sx={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <Hidden smDown>\n          <Typography variant=\"h6\">Imgur App</Typography>\n        </Hidden>\n        <Search>\n          <SearchIconWrapper>\n            <SearchIcon />\n          </SearchIconWrapper>\n          <StyledInputBase\n            onChange={(e) => onSearchStringChange(e.target.value)}\n            placeholder=\"Search…\"\n            inputProps={{ \"aria-label\": \"search\" }}\n          />\n        </Search>\n        <FormControlLabel\n          label=\"\"\n          sx={{ mr: 0, ml: 3 }}\n          control={\n            <MaterialUISwitch checked={themePaletteMode === THEME.DARK} />\n          }\n          onClick={() =>\n            setThemePaletteMode(\n              themePaletteMode === THEME.DARK ? THEME.LIGHT : THEME.DARK\n            )\n          }\n        />\n      </Toolbar>\n    </AppBar>\n  );\n});\n","import { Close } from \"@mui/icons-material\";\nimport { Chip, Divider, IconButton, Modal, Paper, Typography } from \"@mui/material\";\nimport { CSSProperties } from \"@mui/styled-engine\";\nimport { Box } from \"@mui/system\";\nimport { Image, ImgurData } from \"hooks\";\nimport { useState } from \"react\";\n\ninterface MemeListItemProps {\n  index: number;\n  style: CSSProperties;\n  item: ImgurData[\"data\"][0] | undefined;\n}\n\ninterface ModalImgProps {\n  link: string;\n  onClose: () => void;\n}\n\nconst ModalImg = ({ link, onClose }: ModalImgProps) => {\n  return (\n    <Modal open={true} onClose={onClose}>\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box display=\"flex\" justifyContent=\"flex-end\">\n          <IconButton onClick={onClose}>\n            <Close />\n          </IconButton>\n        </Box>\n        <Box flex=\"1\" position=\"relative\" sx={{ margin: 3 }}>\n          <img\n            onClick={onClose}\n            style={{\n              cursor: \"pointer\",\n              position: \"absolute\",\n              height: \"100%\",\n              width: \"100%\",\n              objectFit: \"contain\",\n            }}\n            src={link}\n            alt=\"imgur meme\"\n          />\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n\ninterface MediaProps {\n  image: {\n    type?: Image[\"type\"];\n    link?: Image[\"link\"];\n    description?: Image[\"description\"];\n  };\n}\n\nconst Media = ({ image }: MediaProps) => {\n  const [linkForModal, setLinkForModal] = useState(\"\");\n  if (image?.type?.includes(\"image\")) {\n    return (\n      <>\n        <img\n          style={{\n            position: \"absolute\",\n            height: \"100%\",\n            width: \"100%\",\n            objectFit: \"contain\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => setLinkForModal(image?.link || \"\")}\n          src={image?.link}\n          alt={image?.description?.toString() || \"imgur image\"}\n        />\n        {Boolean(linkForModal) && <ModalImg link={linkForModal} onClose={() => setLinkForModal(\"\")} />}\n      </>\n    );\n  }\n  if (image?.type?.includes(\"video\")) {\n    return (\n      <video\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        src={image?.link}\n        controls\n        loop\n      />\n    );\n  }\n  return <p>No media attached</p>;\n};\n\nexport const MemeListItem = ({ index, style, item }: MemeListItemProps) => {\n  const finalItem = item?.type && item?.link ? item : item?.images[0];\n  return (\n    <Box\n      key={index}\n      sx={{\n        ...style,\n        display: \"flex\",\n        flexDirection: \"column\",\n        \"&:last-child > .MuiPaper-root\": {\n          mb: (t) => `${t.spacing(2)}!important`,\n        },\n      }}\n    >\n      <Paper\n        sx={{\n          flex: 1,\n          overflow: \"hidden\",\n          mt: 2,\n          mx: 2,\n          p: 2,\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Typography variant=\"h6\" sx={{ my: 2 }}>\n          {item?.title}\n        </Typography>\n        <Divider sx={{ mx: -3, mb: 3 }} />\n        <Box flex=\"1\" position=\"relative\">\n          <Media image={finalItem as Image} />\n        </Box>\n        <Divider sx={{ mx: -3, mb: 3 }} />\n        <Box sx={{ overflowX: \"auto\", whiteSpace: \"nowrap\" }}>\n          {item?.tags.map((tag) => (\n            <Chip\n              key={tag.display_name}\n              label={`#${tag.display_name}`}\n              variant=\"outlined\"\n              sx={{ mr: 1, \"&:last-child\": { mr: 0 } }}\n            />\n          ))}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n","import { useFetchImgurData } from \"hooks\";\nimport { Box } from \"@mui/material\";\nimport { Header } from \"./components/Header\";\nimport { memo, useMemo, useState } from \"react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeList } from \"react-window\";\nimport { MemeListItem } from \"./components//MemeListItem\";\nimport { debounce } from \"lodash\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nexport const MemeListPage = memo(() => {\n  const { data } = useFetchImgurData();\n  const [searchString, setSearchString] = useState(\"\");\n\n  // using useMemo as it has same behavior here as useCallback\n  // and misses eslint error for react-hooks/exhaustive-deps\n  const setSearchStringDebounced = useMemo(() => debounce(setSearchString, 300), [setSearchString]);\n\n  const filteredMemeList = useMemo(\n    () =>\n      data?.filter((meme) => {\n        return (\n          meme?.tags?.some((tag) => tag?.display_name?.includes(searchString)) ||\n          meme?.images?.some((image) => image?.tags?.some((tag) => tag?.display_name?.includes(searchString)))\n        );\n      }) || [],\n    [data, searchString]\n  );\n  const widthUnder500 = useMediaQuery(\"(max-width:500px)\");\n  return (\n    <Box height=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <Header onSearchStringChange={setSearchStringDebounced} />\n      <Box flex=\"1\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <Box flex=\"1\" maxWidth=\"600px\" width=\"100%\">\n          <AutoSizer>\n            {({ height, width }) => (\n              <FixedSizeList\n                height={height}\n                width={width}\n                itemCount={filteredMemeList.length || 0}\n                itemSize={widthUnder500 ? 500 : 600}\n                overscanCount={4}\n              >\n                {({ index, style }) => {\n                  const item = filteredMemeList[index];\n\n                  return <MemeListItem index={index} item={item} style={style} />;\n                }}\n              </FixedSizeList>\n            )}\n          </AutoSizer>\n        </Box>\n      </Box>\n    </Box>\n  );\n});\n","import { QueryClientProvider, QueryClient } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { MemeListPage } from \"pages\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeContextProvider } from \"context\";\n\nexport const queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <ThemeContextProvider>\n      <CssBaseline />\n      <QueryClientProvider client={queryClient}>\n        <MemeListPage />\n        <ReactQueryDevtools initialIsOpen={false} position=\"bottom-right\" />\n      </QueryClientProvider>\n    </ThemeContextProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}